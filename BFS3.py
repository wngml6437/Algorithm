"""
[문제]
욱제는 학교 숙제로 크기가 8×8인 체스판에서 탈출하는 게임을 만들었다. 
체스판의 모든 칸은 빈 칸 또는 벽 중 하나이다. 
욱제의 캐릭터는 가장 왼쪽 아랫 칸에 있고, 이 캐릭터는 가장 오른쪽 윗 칸으로 이동해야 한다.

이 게임의 특징은 벽이 움직인다는 점이다. 
1초마다 모든 벽이 아래에 있는 행으로 한 칸씩 내려가고, 
가장 아래에 있어서 아래에 행이 없다면 벽이 사라지게 된다. 
욱제의 캐릭터는 1초에 인접한 한 칸 또는 대각선 방향으로 인접한 한 칸으로 이동하거나, 현재 위치에 서 있을 수 있다. 
이동할 때는 빈 칸으로만 이동할 수 있다.

1초 동안 욱제의 캐릭터가 먼저 이동하고, 그 다음 벽이 이동한다. 
벽이 캐릭터가 있는 칸으로 이동하면 더 이상 캐릭터는 이동할 수 없다.

욱제의 캐릭터가 가장 오른쪽 윗 칸으로 이동할 수 있는지 없는지 구해보자.


[입력]
8개 줄에 걸쳐서 체스판의 상태가 주어진다. 
'.'은 빈 칸, 
'#'는 벽이다. 
가장 왼쪽 아랫칸은 항상 벽이 아니다.


[출력]
욱제의 캐릭터가 가장 오른쪽 윗 칸에 도착할 수 있으면 1, 없으면 0을 출력한다.


[입력 예시 1]
........
........
........
........
........
........
........
........


[출력 예시 1]
1


[입력 예시 2]
........
........
........
........
........
........
##......
........


[출력 예시 2]
0


[입력 예시 3]
........
........
........
........
........
.#......
#.......
.#......


[출력 예시 3]
0


[입력 예시 4]
........
........
........
........
........
.#######
#.......
........


[출력 예시 4]
1


[입력 예시 5]
........
........
........
........
#.......
.#######
#.......
........


[출력 예시 5]
0


"""


# PyPy3 제출    : 메모리(127528 KB) 시간(152 ms)
# Python3 제출  : 메모리(32452 KB)  시간(88 ms)

# 참고 : https://chelseashin.tistory.com/m/77


# BFS

from sys import stdin
input = stdin.readline
from collections import deque

# 9방향
dr = (0, -1, 0, 1, 1, 1, 0, -1, -1)
dc = (0, 1, 1, 1, 0, -1, -1, -1, 0)

def bfs():
    Q = deque([(7, 0)])
    time = 0
    while Q:
        visited = [[0] * 8 for _ in range(8)]
        qlen = len(Q)
        for _ in range(qlen):
            r, c = Q.popleft()
            if board[r][c] == "#":  # 이동 시작 위치가 벽이면
                continue
            if (r, c) == (0, 7):    # 탈출 성공
                return 1

            for d in range(9):
                nr = r + dr[d]
                nc = c + dc[d]
                # 격자 밖으로 나가면
                if not (0 <= nr < 8 and 0 <= nc < 8):
                    continue
                # 이동할 위치가 벽이거나 이미 방문했으면
                if board[nr][nc] == "#" or visited[nr][nc]:
                    continue
                visited[nr][nc] = 1
                Q.append((nr, nc))
        
        # 벽 이동
        board.pop()
        board.appendleft(['.', '.', '.', '.', '.', '.', '.', '.'])

        time += 1
        if time == 9:   # 9초 후 현존하는 벽 없으므로 탈출 가능
            return 1
    return 0    # 탈출 실패

# main
board = deque(list(input().rstrip()) for _ in range(8))
print(bfs())